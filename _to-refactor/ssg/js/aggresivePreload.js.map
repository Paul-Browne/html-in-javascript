{
  "version": 3,
  "sources": ["../../src/js/aggresivePreload.js"],
  "sourcesContent": ["window.preloader = {\n    loadedPages: [\n        window.location.origin + window.location.pathname\n    ],\n}\n\n// window.preloader.linkObserver = new IntersectionObserver(entries => {\n//     let loading = 0;\n//     for (const entry of entries) {\n//         const { href } = entry.target;\n//         if(window.preloader.loadedPages.includes(href)){\n//             window.preloader.linkObserver.unobserve(entry.target);\n//         }else if(entry.isIntersecting){\n//             window.preloader.loadedPages.push(href)\n//             window.preloader.linkObserver.unobserve(entry.target);\n//             setTimeout(() => {\n//                 const iframe = document.createElement(\"IFRAME\")\n//                 // const requestURL = new URL(href)\n//                 // requestURL.searchParams.append('preloaded', true)\n//                 // iframe.src = requestURL;\n//                 iframe.src = href;\n//                 iframe.style.display = \"none\"\n//                 document.body.appendChild(iframe)\n//             }, loading * 3 * 1000)\n//             loading += 1;\n//         }\n//     }\n// });\n\nwindow.preloader.linkObserver = new IntersectionObserver(entries => {\n    for (const entry of entries) {\n        const { href } = entry.target;\n        if(window.preloader.loadedPages.includes(href)){\n            window.preloader.linkObserver.unobserve(entry.target);\n        }else if(entry.isIntersecting){\n            window.preloader.loadedPages.push(href)\n            window.preloader.linkObserver.unobserve(entry.target);\n            const iframe = document.createElement(\"IFRAME\")\n            iframe.src = href;\n            iframe.style.display = \"none\"\n            document.body.appendChild(iframe)\n        }\n    }\n});\n\nwindow.preloader.refreshLinkObserver = () => {\n    if(window.top === window.self){\n        const anchors = document.querySelectorAll('a')\n        for (const anchor of anchors) {\n            const { href } = anchor\n            if(\n                href &&\n                new URL(href).origin === window.location.origin &&          // not external\n                new URL(href).pathname !== window.location.pathname &&      // not same as current page\n                !window.preloader.loadedPages.includes(href)                // hasn't been loaded\n            ){\n                window.preloader.linkObserver.observe(anchor);\n            }\n        }\n    }\n}"],
  "mappings": "AAAA,OAAO,UAAY,CACf,YAAa,CACT,OAAO,SAAS,OAAS,OAAO,SAAS,QAC7C,CACJ,EAyBA,OAAO,UAAU,aAAe,IAAI,qBAAqBA,GAAW,CAChE,QAAWC,KAASD,EAAS,CACzB,GAAM,CAAE,KAAAE,CAAK,EAAID,EAAM,OACvB,GAAG,OAAO,UAAU,YAAY,SAASC,CAAI,EACzC,OAAO,UAAU,aAAa,UAAUD,EAAM,MAAM,UAC/CA,EAAM,eAAe,CAC1B,OAAO,UAAU,YAAY,KAAKC,CAAI,EACtC,OAAO,UAAU,aAAa,UAAUD,EAAM,MAAM,EACpD,IAAME,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,IAAMD,EACbC,EAAO,MAAM,QAAU,OACvB,SAAS,KAAK,YAAYA,CAAM,CACpC,CACJ,CACJ,CAAC,EAED,OAAO,UAAU,oBAAsB,IAAM,CACzC,GAAG,OAAO,MAAQ,OAAO,KAAK,CAC1B,IAAMC,EAAU,SAAS,iBAAiB,GAAG,EAC7C,QAAWC,KAAUD,EAAS,CAC1B,GAAM,CAAE,KAAAF,CAAK,EAAIG,EAEbH,GACA,IAAI,IAAIA,CAAI,EAAE,SAAW,OAAO,SAAS,QACzC,IAAI,IAAIA,CAAI,EAAE,WAAa,OAAO,SAAS,UAC3C,CAAC,OAAO,UAAU,YAAY,SAASA,CAAI,GAE3C,OAAO,UAAU,aAAa,QAAQG,CAAM,CAEpD,CACJ,CACJ",
  "names": ["entries", "entry", "href", "iframe", "anchors", "anchor"]
}
