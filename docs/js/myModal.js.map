{
  "version": 3,
  "sources": ["../../extended/utils/injectStyleBrowser.js", "../../extended/utils/injectStyleNode.js", "../../extended/utils/injectStyle.js", "../../extended/fullViewportHero/index.js", "../../extended/modalContent/escapeClosesModal.js", "../../src/js/myModal.js"],
  "sourcesContent": ["export default ({ cssString = null, cssUrl = null }) => {\n    if(cssString){\n        // if cssString already exists in the head, don't add it again\n        const existingStyle = document.head.querySelectorAll('style');\n        for(let style of existingStyle){\n            if(style.textContent === cssString) return \"\";\n        }\n        const style = document.createElement('style');\n        style.textContent = cssString;\n        document.head.appendChild(style);\n    }\n    if(cssUrl){\n        // if cssUrl already exists in the head, don't add it again\n        const existingLink = document.head.querySelectorAll('link');\n        for(let link of existingLink){\n            if(link.getAttribute('href') === cssUrl) return \"\";\n        }\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.setAttribute('href', cssUrl);\n        document.head.appendChild(link);\n    }\n}", "import htjs from 'html-in-javascript';\n\nconst { style, link } = htjs;\n\nconst qwe = ({ cssString = null, cssUrl = null }) => {\n    if(qwe[cssString || cssUrl]) return \"\";\n    if(cssString){\n        qwe[cssString] = true\n        return style(cssString)\n    }\n    if(cssUrl){\n        qwe[cssUrl] = true\n        return link({\n            rel: 'stylesheet',\n            href: cssUrl\n        })\n    }\n}\n\nexport default qwe", "import injectStyleBrowser from './injectStyleBrowser.js'\nimport injectStyleNode from './injectStyleNode.js'\n\nexport default ({\n    cssString = null,\n    cssUrl = null\n} = {}) => {\n    if(!cssString && !cssUrl) return \"\";\n    if(typeof window == 'object'){\n        injectStyleBrowser({\n            cssString,\n            cssUrl\n        })\n    }else{\n        return injectStyleNode({\n            cssString,\n            cssUrl\n        })\n    }\n    return \"\"\n}", "import htjs from \"html-in-javascript\"\nimport injectStyle from \"../utils/injectStyle.js\"\n\nconst { fragment, section, link, style, script } = htjs\n\nexport default ({\n    classes = \"fullscreen-hero\",\n} = {}, ...content) => {\n    const e = injectStyle({\n        cssString: `.fullscreen-hero {\n            width: 100%;\n            height: 100vh;\n        }`\n    })\n    return fragment(\n        e,\n        section({\n            class: classes\n        }, ...content)\n    )\n}", "// close modal on escape key\nconst attachEscapeKeyListener = () => {\n    if(attachEscapeKeyListener.ran) return\n    attachEscapeKeyListener.ran = true\n    document.addEventListener(\"keydown\", e => {\n        if(e.key === \"Escape\") {\n            document.querySelectorAll('.modal').forEach(modal => {\n                // doesn't have an open modal inside\n                if(!modal.querySelector('.modal')){\n                    modal.remove()\n                }\n            })\n        }\n    });\n}\n\nexport default attachEscapeKeyListener", "// contents of the modal\nimport htjs from 'html-in-javascript'\nimport modalContent from \"../../extended/modalContent/index.js\";\nimport modal from '../../extended/modalTrigger/index.js';\n\nimport fullViewportHero from '../../extended/fullViewportHero/index.js';\n\n// run once\nimport attachEscapeKeyListener from '../../extended/modalContent/escapeClosesModal.js';\nattachEscapeKeyListener()\n\nexport default async el => {\n    const { p, h1 } = htjs\n    document.getElementById(el.dataset.formodal).innerHTML = modalContent(\n        h1(\"Hello World\"),\n        p(\"This is a modal\"),\n        fullViewportHero({}, \"hello full ZzzZZZZzzZZzzZZ modal!\"),\n        modal({\n            url: '/js/myModal.js'\n        }, \"Click me!!\"),\n    )\n}\n"],
  "mappings": "wHAAA,IAAOA,EAAQ,CAAC,CAAE,UAAAC,EAAY,KAAM,OAAAC,EAAS,IAAK,IAAM,CACpD,GAAGD,EAAU,CAET,IAAME,EAAgB,SAAS,KAAK,iBAAiB,OAAO,EAC5D,QAAQC,KAASD,EACb,GAAGC,EAAM,cAAgBH,EAAW,MAAO,GAE/C,IAAMG,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAcH,EACpB,SAAS,KAAK,YAAYG,CAAK,CACnC,CACA,GAAGF,EAAO,CAEN,IAAMG,EAAe,SAAS,KAAK,iBAAiB,MAAM,EAC1D,QAAQC,KAAQD,EACZ,GAAGC,EAAK,aAAa,MAAM,IAAMJ,EAAQ,MAAO,GAEpD,IAAMI,EAAO,SAAS,cAAc,MAAM,EAC1CA,EAAK,IAAM,aACXA,EAAK,aAAa,OAAQJ,CAAM,EAChC,SAAS,KAAK,YAAYI,CAAI,CAClC,CACJ,ECpBA,GAAM,CAAE,MAAAC,EAAO,KAAAC,CAAK,EAAIC,EAElBC,EAAM,CAAC,CAAE,UAAAC,EAAY,KAAM,OAAAC,EAAS,IAAK,IAAM,CACjD,GAAGF,EAAIC,GAAaC,CAAM,EAAG,MAAO,GACpC,GAAGD,EACC,OAAAD,EAAIC,CAAS,EAAI,GACVJ,EAAMI,CAAS,EAE1B,GAAGC,EACC,OAAAF,EAAIE,CAAM,EAAI,GACPJ,EAAK,CACR,IAAK,aACL,KAAMI,CACV,CAAC,CAET,EAEOC,EAAQH,EChBf,IAAOI,EAAQ,CAAC,CACZ,UAAAC,EAAY,KACZ,OAAAC,EAAS,IACb,EAAI,CAAC,IAAM,CACP,GAAG,CAACD,GAAa,CAACC,EAAQ,MAAO,GACjC,GAAG,OAAO,QAAU,SAChBC,EAAmB,CACf,UAAAF,EACA,OAAAC,CACJ,CAAC,MAED,QAAOE,EAAgB,CACnB,UAAAH,EACA,OAAAC,CACJ,CAAC,EAEL,MAAO,EACX,ECjBA,GAAM,CAAE,SAAAG,EAAU,QAAAC,EAAS,KAAAC,EAAM,MAAAC,EAAO,OAAAC,CAAO,EAAIC,EAE5CC,EAAQ,CAAC,CACZ,QAAAC,EAAU,iBACd,EAAI,CAAC,KAAMC,IAAY,CACnB,IAAMC,EAAIC,EAAY,CAClB,UAAW;AAAA;AAAA;AAAA,UAIf,CAAC,EACD,OAAOV,EACHS,EACAR,EAAQ,CACJ,MAAOM,CACX,EAAG,GAAGC,CAAO,CACjB,CACJ,ECnBA,IAAMG,EAA0B,IAAM,CAC/BA,EAAwB,MAC3BA,EAAwB,IAAM,GAC9B,SAAS,iBAAiB,UAAWC,GAAK,CACnCA,EAAE,MAAQ,UACT,SAAS,iBAAiB,QAAQ,EAAE,QAAQC,GAAS,CAE7CA,EAAM,cAAc,QAAQ,GAC5BA,EAAM,OAAO,CAErB,CAAC,CAET,CAAC,EACL,EAEOC,EAAQH,ECPfI,EAAwB,EAExB,IAAOC,EAAQ,MAAMC,GAAM,CACvB,GAAM,CAAE,EAAAC,EAAG,GAAAC,CAAG,EAAIC,EAClB,SAAS,eAAeH,EAAG,QAAQ,QAAQ,EAAE,UAAYI,EACrDF,EAAG,aAAa,EAChBD,EAAE,iBAAiB,EACnBI,EAAiB,CAAC,EAAG,mCAAmC,EACxDC,EAAM,CACF,IAAK,gBACT,EAAG,YAAY,CACnB,CACJ",
  "names": ["injectStyleBrowser_default", "cssString", "cssUrl", "existingStyle", "style", "existingLink", "link", "style", "link", "u", "qwe", "cssString", "cssUrl", "injectStyleNode_default", "injectStyle_default", "cssString", "cssUrl", "injectStyleBrowser_default", "injectStyleNode_default", "fragment", "section", "link", "style", "script", "u", "fullViewportHero_default", "classes", "content", "e", "injectStyle_default", "attachEscapeKeyListener", "e", "modal", "escapeClosesModal_default", "escapeClosesModal_default", "myModal_default", "el", "p", "h1", "u", "modalContent_default", "fullViewportHero_default", "modalTrigger_default"]
}
